pip install tk
import tkinter as tk
from tkinter import messagebox
from datetime import datetime
import time

class PayrollApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Payroll Timekeeping System")

        # Employee data
        self.employee_name = "John Doe"
        self.hourly_rate = 15.50  # example hourly rate

        # Store time records
        self.time_records = []

        # Create the user interface components
        self.create_widgets()

    def create_widgets(self):
        # Employee Name Label
        self.label_name = tk.Label(self.root, text=f"Employee: {self.employee_name}")
        self.label_name.grid(row=0, column=0, columnspan=2, pady=10)

        # Clock In Button
        self.clock_in_button = tk.Button(self.root, text="Clock In", width=20, command=self.clock_in)
        self.clock_in_button.grid(row=1, column=0, padx=20, pady=10)

        # Clock Out Button
        self.clock_out_button = tk.Button(self.root, text="Clock Out", width=20, command=self.clock_out)
        self.clock_out_button.grid(row=1, column=1, padx=20, pady=10)

        # Calculate Payroll Button
        self.calculate_button = tk.Button(self.root, text="Calculate Payroll", width=20, command=self.calculate_payroll)
        self.calculate_button.grid(row=2, column=0, columnspan=2, pady=10)

        # Total Hours and Pay Display
        self.total_hours_label = tk.Label(self.root, text="Total Worked Hours: 0.00 hours")
        self.total_hours_label.grid(row=3, column=0, columnspan=2, pady=5)

        self.total_pay_label = tk.Label(self.root, text="Total Pay: $0.00")
        self.total_pay_label.grid(row=4, column=0, columnspan=2, pady=5)

    def clock_in(self):
        """Record clock-in time"""
        clock_in_time = datetime.now()
        self.time_records.append({'clock_in': clock_in_time})
        messagebox.showinfo("Clock In", f"{self.employee_name} clocked in at {clock_in_time.strftime('%Y-%m-%d %H:%M:%S')}")

    def clock_out(self):
        """Record clock-out time and calculate worked hours"""
        if not self.time_records or 'clock_out' in self.time_records[-1]:
            messagebox.showerror("Error", "You must clock in before clocking out.")
            return

        clock_out_time = datetime.now()
        clock_in_time = self.time_records[-1]['clock_in']
        self.time_records[-1]['clock_out'] = clock_out_time

        worked_hours = (clock_out_time - clock_in_time).seconds / 3600  # hours
        total_pay = worked_hours * self.hourly_rate

        messagebox.showinfo("Clock Out", f"{self.employee_name} clocked out at {clock_out_time.strftime('%Y-%m-%d %H:%M:%S')}\n"
                                        f"Worked hours: {worked_hours:.2f} hours\n"
                                        f"Total pay: ${total_pay:.2f}")

    def calculate_payroll(self):
        """Calculate total hours worked and total pay"""
        total_hours = 0
        for record in self.time_records:
            if 'clock_out' in record:
                clock_in_time = record['clock_in']
                clock_out_time = record['clock_out']
                worked_hours = (clock_out_time - clock_in_time).seconds / 3600
                total_hours += worked_hours

        total_pay = total_hours * self.hourly_rate

        self.total_hours_label.config(text=f"Total Worked Hours: {total_hours:.2f} hours")
        self.total_pay_label.config(text=f"Total Pay: ${total_pay:.2f}")

# Create the main window
root = tk.Tk()
app = PayrollApp(root)

# Start the application
root.mainloop()
